generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  groupId            String? // might not be in the group at first
  group              Group?              @relation(fields: [groupId], references: [id])
  assignments        Assignment[]
  comments           Comment[]
  notifications      Notification[]
  reviews            Review[]
  subjectEnrollments SubjectEnrollment[]
}

model Group {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  users       User[]
  assignments Assignment[]
}

model Subject {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  masterAssignments  MasterAssignment[]
  subjectEnrollments SubjectEnrollment[]
}

model SubjectEnrollment {
  subjectId String
  userId    String

  subject Subject @relation(fields: [subjectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([subjectId, userId])
}

model MasterAssignment {
  id        String   @id @default(uuid())
  title     String
  detail    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  subjectId   String
  subject     Subject      @relation(fields: [subjectId], references: [id])
  assignments Assignment[]
}

model Assignment {
  id      String         @id @default(uuid())
  type    AssignmentType
  status  Status
  content String

  masterId         String
  masterAssignment MasterAssignment @relation(fields: [masterId], references: [id])
  userId           String?
  user             User?            @relation(fields: [userId], references: [id])
  groupId          String?
  group            Group?           @relation(fields: [groupId], references: [id])
  reviews          Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  reviewerAssignment AssignmentReview[] @relation("reviewerAssignment")
  reviewAssignment   AssignmentReview[] @relation("reviewAssignment")
}

model AssignmentReview {
  id String @id @default(uuid())

  reviewerAssignmentId String
  reviewerAssignment   Assignment @relation("reviewerAssignment", fields: [reviewerAssignmentId], references: [id])

  reviewAssignmentId String
  reviewAssignment   Assignment @relation("reviewAssignment", fields: [reviewAssignmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  comments     Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  replyTo   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  reviewId String
  review   Review @relation(fields: [reviewId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  content   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model OtpChallenge {
  id      String @id @default(uuid())
  otpCode String
  email   String
  ref     String @unique
}

enum Role {
  STUDENT
  INSTRUCTOR
}

enum Status {
  ASSIGNED
  SUBMITTED
  READY_TO_REVIEW
  IN_REVIEW
  REVIEWED
  COMPLETED
}

enum NotificationType {
  DUE_DATE
  ASSIGN_REVIEW
  COMMENT
  REVIEWED
}

enum AssignmentType {
  SUBMISSION
  REVIEW
}
